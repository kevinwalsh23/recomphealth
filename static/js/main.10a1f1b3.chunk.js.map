{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","initializeReactGA","values","console","log","JSON","stringify","alert","postFeedback","resetFeedbackForm","ReactGA","initialize","pageview","react_default","a","createElement","className","action","method","type","name","id","placeholder","value","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10a1f1b3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactGA from 'react-ga';\n\n// const validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    componentWillMount() {\n      this.initializeReactGA();\n    }\n    handleSubmit(values) {\n      console.log(\"values: \" + values)\n\n      console.log(\"Current State is: \" + JSON.stringify(values));\n      alert(\"Current State is: \" + JSON.stringify(values));\n      this.props.postFeedback(values);\n      this.props.resetFeedbackForm();\n    }\n    initializeReactGA() {\n      ReactGA.initialize('UA-116537882-2');\n      ReactGA.pageview('/homepage');\n    }  \n    render() {\n      return (\n        <div>\n        <div className=\"App\">\n          <nav className=\"navbar bg-light titlefont\">\n            <span className=\"navbar-size-new mb-0 h1 titlefont\">Recomp Health</span>\n          </nav>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md m-1\">\n                <h1 className=\"homefont textmargin\"><b>Simplified employee health incentives that work.</b></h1>\n                <h5 className=\"subfont\">Recomp Health helps companies provide effective health incentives to their employees, in a simple and streamlined process.</h5>\n                <div className=\"formstyle\">\n                <form className=\"form-inline formstyle\" action=\"https://formspree.io/kevinwalsh23@gmail.com\" method=\"POST\">\n                  <input type=\"email\" name=\"_replyto\" className=\"form-control mb-2 mr-sm-2\" id=\"inlineFormInputName2\" placeholder=\"name@company.com\"/>              \n                  <button type=\"submit\" value=\"Send\" className=\"btn btn-secondary rounded mb-2\">Request Access</button>\n                </form>\n                </div>      \n              </div>\n              <div className=\"col-md m-1 imagestyle\" >\n                <img src={\"rhprof.png\"} className=\"App-logo imagestyle\" alt=\"logo\" />\n              </div>\n            </div>\n          \n          </div>\n          <div className=\"whyrecomp\">\n              <div>\n                <h1 className=\"whytext\"><b>Why Recomp Health?</b></h1>   \n                <h4 className=\"whytext\">Health incentives work, and employees are healthier, happier and more productive. Benefits include: </h4>\n                <h5 className=\"whybody\">1. Up to 2.7x more productive everyday at work.</h5>\n                <h5 className=\"whybody\">2. Take fewer sick days.</h5>\n                <h5 className=\"whybody\">3. Lower Health Insurance payments.</h5>\n                <h5 className=\"whybody\">4. Improved company culture.</h5>\n              </div>              \n          </div>\n          <div className=\"whyrecomp\">\n              <div>\n                <h1 className=\"whytext\"><b>The process is simple.</b></h1>   \n                <h4 className=\"whytext\">Setting up health incentive programs can be difficult, Recomp Health takes all of the leg work out of this for you.</h4>\n                <h5 className=\"whybody\">1. Employees download our mobile app.</h5>\n                <h5 className=\"whybody\">2. Employees log their workouts in our app. (We verify all workouts with location services so you can be assured there is no cheating going on.)</h5>\n                <h5 className=\"whybody\">3. Employees can cash out instantly.</h5>\n                <h5 className=\"whybody\">4. At the end of the month, we send you a report of how many workouts your employees logged, and you make one payment to Recomp Health. </h5>\n              </div>              \n          </div>  \n          <div className=\"whyrecomp\">\n              <div>\n                <h1 className=\"whytext\"><b>Request an invite.</b></h1>                   \n                <form className=\"form-inline bottomformstyle\" action=\"https://formspree.io/kevinwalsh23@gmail.com\" method=\"POST\">\n                  <input type=\"email\" name=\"_replyto\" className=\"form-control mb-2 mr-sm-2\" id=\"inlineFormInputName2\" placeholder=\"name@company.com\"/>              \n                  <button type=\"submit\" value=\"Send\" className=\"btn btn-secondary rounded mb-2 buttonstuff\">Request Access</button>\n                </form>\n              </div>              \n          </div>  \n        </div>\n\n        </div>\n      );\n  }\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}